*, *::before, *::after {
    box-sizing: border-box;
}

:root {
    font-family: Righteous;
    --cyberYellow: #FFDC00;
    --sleekGrey: #DDDDDD;
    --aquaticBlue: #7FDBFF;
    --pirateNavy: #001f3f;
}

body {
    margin: 0;
    padding: 0;
}

.bg {
    width: 100vw;
    height: 100vh;
    display: grid;
    grid-template-rows: 120px 1fr;
    grid-template-columns: 1fr 3fr 1fr;
    background-color: #001f3f;
    background-image: url(./img/cockpit.jpg);
    /* TESTING DEVELOPMENT */
    /* background-color: white; */
}

h1 {
    grid-column: 2;
    justify-self: center;
    font-size: 47px;
    color: var(--cyberYellow);
    /* TESTING DEVELOPMENT */
    /* color: black;  */
}

.boards {
    margin-top: 30px;
    width: 30vw;
    height: 69vh;
    /* border: solid whitesmoke 7px; */

    display: grid;
    grid-template-rows: repeat(10, 1fr);
    grid-template-columns: repeat(10, 1fr);
    
    /* TESTING DEVELOPMENT */
    /* border: solid black 3px; */
}

.boards.board1 {
    
    width: 25vw;
    height: 35vh;
    /* margin-left: 15vw ; */
    /* margin-left: 0.5vw; */
    /* grid-row: 3; */
    /* grid-column: 2; */
    /* justify-self: center; */
    
}

/* TO MAKE THE HUMAN HOLOGRAM LOOK MORE UNIFORM, REPLACE BELOW WITH: .board1 div:nth-child(10n+1)  */
.boards div:nth-child(10n+1) {
    margin-left: 2vw;
    width: 5vw;
}


.boards div:nth-child(10n+10) {
    margin-right: 2vw;
    width: 5vw;
}

.boards div:first-of-type {
    border-top-left-radius: 100%;
}

.boards div:nth-of-type(91) {
    border-bottom-left-radius: 100%;
}

.boards div:nth-of-type(10) {
    border-top-right-radius: 100%;
}
/* 
.boards div:last-of-type {
    border-bottom-right-radius: 100%;
    border: solid white 3px;
} */

div#J10.squares {

    border-bottom-right-radius: 100%;
    /* border: solid white 3px; */
}
/* 
.squares:last-of-type {
    border-bottom-right-radius: 100%;
    border: solid white 3px;

} */



.squares-computer:hover {
    background-color: rgba(255, 220, 0, 0.7);
}
/* 
ATTENTION
ATTENTION
-------------------------------------------------------
-------------------------------------------------------- */
/* LMAOOOOOOOOOOOOOOOOOOOOOO WE DID THE WHOLE STYLING ON THE PLAYER'S BOARD
IT'S SUPPOSED TO BE ON THE COMPUTER'S BOARD!!! SWITCH THE STYLING NAMES */

.boards.board2{
    margin-left: 15vw;
    border:dashed 1px rgba(255, 220, 0, 0.1);
    border: none;
    border-top-left-radius: 10%;
    border-bottom-left-radius: 10%;
    border-top-right-radius: 10%;
    border-bottom-right-radius: 10%;
    width: 70vw;
    height: 30vh;

    grid-row:2;
    /* border-start-end-radius: 70%; */
}


.boards:hover {
    cursor: crosshair;
    
}

.squares-computer {
    border: dashed 1px var(--cyberYellow);
    background-color: rgba(255, 255, 255, 0.2);
}
.squares {
    border: solid cyan 1px;
    background-color: rgba(0, 255, 255, 0.3);
    cursor: pointer;
    /* TESTING DEVELOPMENT */
    /* border: solid black 1px; */
}

.squares-animation {
    animation: append-animate .3s linear;
}

.cursor-not-allowed {
    cursor:not-allowed;
}

.squares-computer:first-of-type {
    border-top-left-radius: 100%;
}

.hovered-ship {
    background-color: black;
}

.revealed-ship {
    background-color: red;
}

/* NOTE ON VERTICAL POSITIONING ----------------------------------------> */
/* WHEN WE PLACE OUR OWN SHIPS, IF WE'RE POSITIONING THE SHIP VERTICALLY, just :nth-child(10n) */
/* WE want to select every other 10th square. So vertically we're selecting A2, B2, C2, etc */
/* HOWEVER, WE'RE GETTING THE COORDINATES FROM THE LOGIC, NOT THE CSS! */
/* So what we do is when we click the square, we get the index of its id in allSquaresXD nodeList with querySelectorAll, to do that, we first need to make an Array.from(allSquaresXD)*/
/* And after we have the id in the Array, just loop over the original nodeList up to the length of the ship currently being placed.  */
/* Each loop, we find the item at 0 + 10 */
button {
    max-width: max-content;
    max-height: max-content;
}

.hello {
    color: red;
    font-size: 100px;
}

.coloured-in {
    /* background-color: cyan; */
    /* border-color: cyan; */
    background-color: darkred;
    border: none;
    animation: pulse 5s infinite;
}

.coloured-in:hover {
    background-color:cyan;
}

.missed-shot {
    background-color: cyan;
    background-color: white;
    clip-path: polygon(100% 35%,100.00% 43.00%,0.00% 43.00%,0% 35%);
}

.missed-shot:hover {
    background-color: #7FDBFF;
    background-color: white;
}

.missed-shot-from-computer {
    background-color: rgba(255, 255, 255, 0.7);
}

.coloured-in-from-computer {
    background-color: yellow;
}

.allied-ship-location {
    background-color: var(--cyberYellow);
    border: solid var(--cyberYellow) 1px;
}

.deploy-ships-btn {

    grid-row: 2;
    position: absolute;
    justify-self: center;
    align-self: center;
    background-color: var(--cyberYellow);
    font-family: 'Righteous';
    font-size: 60px;
    color: rgb(9, 9, 75);
    max-width: 70vw;
    height: fit-content;
    
    display: grid;
    flex-wrap: wrap;
    cursor: pointer;
}

.rotate-btn {
    justify-self: center;
    align-self: center;
    margin-top: 10%;
    margin-left: 395%;
    background-color: var(--cyberYellow);
    font-family: 'Righteous';
    font-size: 60px;
    color: rgb(9, 9, 75);
    max-width: 70vw;
    height: fit-content;
/*     
    display: grid;
    flex-wrap: wrap; */
    cursor: pointer;
}

.rotate-vertical {
    transform: rotate(-0.25turn);
}

#rotate-button {
    /* background-color: whitesmoke;
    justify-items: center; */
}

.invisible {
    display: none;
}

.hide {
    visibility: hidden;
}

.mini {
    height: 5%;
    width: 5%;
}

.invisible:hover {
    cursor:default;
}

.placement-stage {
    width: 5vw;
    height: 6vh;
}

.board1.board-placement-stage {
    grid-row: 2;
    grid-column: 2;
    justify-content: center;
    /* z-index: inherit; */
}

.absolute-position {
    /* z-index: 10; */
}

/* ////////////// FIND out if there's a div that is only present when there is a ship being presented */
/* If there is, that is probably what is pushing the board1 left and right */

/* Testing draggable CSS thing from digitalocean */

.example-parent {
    border: 2px solid #DFA612;
    color: black;
    display: flex;
    font-family: sans-serif;
    font-weight: bold;
  }
  
  .example-origin {
    /* flex-basis: 100%; */
    /* flex-grow: 1; */

    /* display: flex; */
    position: absolute;
    justify-content: center;
  }
  
  .example-draggable {
    background-color: #4AAE9B;
    /* background: url('./img/xwing-sideview2-removebg-preview.png') no-repeat; */
    font-weight: normal;
    /* margin-bottom: 10px;
    margin-top: 10px;
    padding: 10px; */
  }

  .example-draggable-img {
    /* background: url('./img/xwing.png') no-repeat; */
    /* font-weight: normal; */
    
    max-width: 500px;
    max-height: 420px;
    width: 90%;
    height: 70%; 
    justify-items: center;
    align-self: center;
    margin-top: -30%;
    /* margin-bottom: 10px;
    margin-top: 10px;
    padding: 10px; */
  }

  #battleship.example-draggable-img {
      /* transform-origin: 0; */
      max-width: 30%;
      max-height: 30%;
      margin-top: -40%;
      /* padding-left: 20%; */
  }

  #battleship.grabbing {
      margin-top: -38%;
      max-width: 16%;
      max-height: 16%;
      /* opacity: 70%; */
  }

  #carrier.example-draggable-img {
      max-width: 100%;
      max-height: 100%;
      margin-left: -16%;
  }

  #carrier.grabbing {
      margin-left: 0;
      max-width: 30%;
      max-height: 30%;
  }

  #x-wing {
      /* background: none; */
    /* transform: translate(0,0); */

  }

  .grabbing {
      max-width: 50%;
      max-height: 20%;
      /* background: none; */
    /* transform: translate(0,0); */
  }

  .squares > .grabbing {
      max-width: 100%;
      max-height: 100%;
  }


  div.on-board > #submarine {
      width: 200%;
      z-index: 99;
      opacity: 99%;
  } 

  div.on-board > #submarine.rotate-vertical {
      width: 100%;
      height: 200%;
      z-index: 99;
      opacity: 99%;
  }

  div.on-board > #cruiser {
      width: 230%;
      opacity: 99%;
  }

  div.on-board > #cruiser.rotate-vertical {
      width: 100%;
      height: 200%;
      z-index: 99;
      opacity: 99%;
  }
  
  div.on-board > #battleship {
      transform: rotate(0deg);
      /* justify-self: center; */
      width: 100%;
      height: 400%;
      z-index: 99;
      opacity: 99%;
  }

  div.on-board > #battleship.rotate-vertical {
      transform: rotate(270deg);
      transform-origin: top center;
    /* transform-origin: 0;  */
    /* margin-bottom: -300%; */
    /* padding-right: 20px; */
      width: 96%;
      height: 500%;
      /* z-index: 99; */
      opacity: 99%;
  }

  div.on-board > #carrier {
      width: 430%;
      height: 100%;
      opacity: 99%;
  }

  div.on-board > #carrier.rotate-vertical {
      margin: 0;
      transform-origin: top left;
      width: 300%;
      height: 100%;
      position: relative;
  }

  div.on-board:has #carrier.rotate-vertical{
  }


  /* .squares.placement-stage.on-board > #submarine {
      opacity: 99%;
  } */

  /* .grabbing#submarine */
  
  
  .example-dropzone {
    background-color: #6DB65B;
    background-color: rgba(255, 255, 255, 0.7);
    /* flex-basis: 100%; */
    /* flex-grow: 1; */
    width: 10%;
    height: 20%;
    /* padding: 10px; */
  }

  .example-parent {
      grid-column: 2;
      grid-row: 2;
      height: 52%;
      width: 70%;
      justify-self: center;
      align-self: center;
      margin-top: -20%;
      margin-right: -5%;
  }

  img {
      width: 100%;
      height: 100%;
  }

  .drag-div {
      grid-column: 2;
      grid-row: 2;
      justify-self: center;
  }

  .painted-square {
    background: var(--cyberYellow);
  }

  .test-drop {
      background-color: var(--cyberYellow);
  }

  .colour-this-square {
      background-color: var(--cyberYellow);
  }

  .black {
      background-color: black;
  }

  .cyan {
      background-color: cyan;
  }

  .positioned-x-wing,
  .positioned-submarine,
  .positioned-cruiser,
  .positioned-battleship,
  .positioned-carrier {
      background-color: var(--cyberYellow);
      border: none;
  }

  .positioned-submarine {
      padding-top: 15px;
  }

  .ready-btn { 
    justify-self: center;
    align-self: center;
    margin-top: 10%;
    margin-left: 395%;
    background-color: #d60338;
    font-family: 'Righteous';
    font-size: 60px;
    color: rgb(9, 9, 75);
    color: white;
    max-width: 70vw;
    height: fit-content;
    padding: 7%;
    cursor: pointer;
  }

  .board1-outside {

    width: 25vw;
    height: 35vh;
    grid-column: 2;
    grid-row: 2;
    justify-self: center;
    align-self: flex-end;

  }

  /* /////

  HERE BEGINS THE IMPLEMENTATION OF THE STOLEN CODE FROM 1stwebdesigner.com/trippy-css-distortion-effects/ 


  ////
  */

  



  /* CONTINUE HERE!!!!!!!!!! FInd a way to give this class to the squares at the moment that 
  we click the READY button, and then wait 1s for the animation to finish before removing the class
  and then adding the fade class as it's repositioned below to make it look like it's appearing  */
  .fade{ 
      /* animation: glitch 2s linear 2s; */
      animation: fade 1s linear 0s;
  }
  
  @keyframes glitch{

    0% { opacity: 1}
    100% { opacity: 0 }

    99%,94%{
      transform: translate(-99px,100) skew(0deg);
    }
    4%,60%{
      transform: translate(99px,100) skew(10deg);
    }
    62%{
      transform: translate(0,0) skew(75deg); 
    }
  }

  @keyframes fade {
      0% { opacity: 0 }
      100% { opacity: 1}
  } 
  
  .glitch:before,
  .glitch:after{
    content: attr(title);
    position: absolute;
    left: 0;
  }
  
  .glitch:before{
    animation: glitchTop 1s linear infinite;
    clip-path: polygon(0 0, 100% 0, 100% 33%, 0 33%);
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 33%, 0 33%);
  }
  
  @keyframes glitchTop{
    2%,64%{
      transform: translate(2px,-2px);
    }
    4%,60%{
      transform: translate(-2px,2px);
    }
    62%{
      transform: translate(13px,-1px) skew(-13deg); 
    }
  }
  
  .squares.placement-stage:after{
    animation: glitchBotom 1.5s linear infinite;
    clip-path: polygon(0 67%, 100% 67%, 100% 100%, 0 100%);
    -webkit-clip-path: polygon(0 67%, 100% 67%, 100% 100%, 0 100%);
  }
  
  @keyframes glitchBotom{
    2%,64%{
      transform: translate(-2px,0);
    }
    4%,60%{
      transform: translate(-2px,0);
    }
    62%{
      transform: translate(-22px,5px) skew(21deg); 
    }
  }
/* 
  and here ends that implementation
  //////////////// */


@font-face {
    font-family: 'Righteous';
    src: url('./fonts/Righteous-Regular.ttf') format('truetype');
}

@keyframes pulse {
    0%, 100% {
        background-color: darkred;
    }
    50% {
        background-color: crimson;
    }
}

@keyframes append-animate {
    from {
        transform: scale(0);
        opacity: 0;
    }
    to {
        transform: scale(1);
        opacity: 1;
    }
}